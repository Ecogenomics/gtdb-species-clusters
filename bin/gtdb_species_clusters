#!/usr/bin/env python3

###############################################################################
#                                                                             #
#    This program is free software: you can redistribute it and/or modify     #
#    it under the terms of the GNU General Public License as published by     #
#    the Free Software Foundation, either version 3 of the License, or        #
#    (at your option) any later version.                                      #
#                                                                             #
#    This program is distributed in the hope that it will be useful,          #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
#    GNU General Public License for more details.                             #
#                                                                             #
#    You should have received a copy of the GNU General Public License        #
#    along with this program. If not, see <http://www.gnu.org/licenses/>.     #
#                                                                             #
###############################################################################

__author__ = "Donovan Parks"
__copyright__ = "Copyright 2015"
__credits__ = ["Donovan Parks"]
__license__ = "GPL3"
__maintainer__ = "Donovan Parks"
__email__ = "donovan.parks@gmail.com"
__status__ = "Development"

import argparse
import logging
import ntpath
import os
import sys

from biolib.common import make_sure_path_exists

from gtdb_species_clusters import __version__
from gtdb_species_clusters.main import OptionsParser


def print_help():
    """Help menu."""

    print('')
    print('                ...::: GTDB Species Clusters v' + __version__ + ' :::...''')
    print('''\

    Establish de novo species clusters:
      qc_genomes          -> Quality check all potential GTDB genomes
      select_type_genomes -> Select type genomes for named species
      cluster_named_types -> Cluster genomes to selected GTDB type genomes
      cluster_de_novo     -> Infer de novo species clusters and type genomes for remaining NCBI genomes
      cluster_user        -> Cluster User genomes to GTDB species clusters, no new representatives are selected
      tree_gids           -> Determine bacterial and archaeal genomes for canonical and validation trees
      
    Update species clusters:
      u_new_genomes        -> Identify new and updated genomes in current GTDB release
      u_qc_genomes         -> Quality check new and updated genomes
      u_gtdbtk             -> Perform initial classification of new and updated genomes using GTDB-Tk
      u_resolve_types      -> Resolve cases where a species has multiple genomes assembled from the type strain
      u_rep_changes        -> Identify lost, updated, reassigned, and unchanged species representatives
      u_rep_actions        -> Perform initial actions required for changed representatives
      u_sel_reps           -> Select representatives for all named species at NCBI 
      u_cluster_named_reps -> Cluster genomes to selected GTDB representatives
      u_synonyms           -> Determine synonyms for validly or effectively published species
      u_cluster_de_novo    -> Infer de novo species clusters and representatives for remaining genomes
      u_species_names      -> Update names of GTDB species clusters
      u_summary_stats      -> Summary statistics indicating changes to GTDB species clusters
      
    Inspect species clusters:
      merge_test -> Produce information relevant to merging two sister species
    
    Other:
      rep_compare         -> Compare current and previous representatives
      cluster_stats       -> Calculate statistics for species clusters

  Use: gtdb_species_clusters <command> -h for command specific help.

  Feature requests or bug reports can be sent to Donovan Parks (donovan.parks@gmail.com)
    or posted on GitHub (https://github.com/Ecogenomics/gtdb-species-clusters).
    ''')

def logger_setup(output_dir, silent):
    """Set logging for application.

    Parameters
    ----------
    output_dir : str
        Output directory for log file.
    silent : boolean
        Flag indicating if output to stdout should be suppressed.
    """

    # setup general properties of logger
    logger = logging.getLogger('')
    logger.setLevel(logging.DEBUG)
    log_format = logging.Formatter(fmt="[%(asctime)s] %(levelname)s: %(message)s",
                                   datefmt="%Y-%m-%d %H:%M:%S")

    # setup logging to console
    if not silent:
        stream_logger = logging.StreamHandler(sys.stdout)
        stream_logger.setFormatter(log_format)
        stream_logger.setLevel(logging.DEBUG)
        logger.addHandler(stream_logger)

    if output_dir:
        make_sure_path_exists(output_dir)
        file_logger = logging.FileHandler(os.path.join(output_dir, 'gtdb_species_clusters.log'), 'a')
        file_logger.setFormatter(log_format)
        logger.addHandler(file_logger)

    logger.info('GTDB Species Clusters v%s' % __version__)
    logger.info(ntpath.basename(sys.argv[0]) + ' ' + ' '.join(sys.argv[1:]))


if __name__ == '__main__':

    DEFAULT_QC_MIN_COMP = 50
    DEFAULT_QC_MAX_CONT = 10
    DEFAULT_QC_MIN_QUALITY = 50
    DEFAULT_QC_SH_EXCEPTION = 80
    DEFAULT_QC_MIN_PERC_MARKERS = 40
    DEFAULT_QC_MAX_CONTIGS = 1000
    DEFAULT_QC_MIN_N50 = 5000
    DEFAULT_QC_MAX_AMBIGUOUS = 100000

    # initialize the options parser
    parser = argparse.ArgumentParser(add_help=False)
    subparsers = parser.add_subparsers(help="--", dest='subparser_name')

    # dereplicate genomes in named species
    qc_genomes_parser = subparsers.add_parser('qc_genomes',
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        description='Quality check all potential GTDB genomes.')
    qc_genomes_parser.add_argument('gtdb_metadata_file', help="metadata file from GTDB with CheckM estimates for all genomes (TSV file)")
    qc_genomes_parser.add_argument('ncbi_genbank_assembly_file', help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    qc_genomes_parser.add_argument('gtdb_domain_report', help="GTDB report of number of bac120 and ar122 marker genes (gtdb power domain_report)")
    qc_genomes_parser.add_argument('qc_exception_file', help="file listing genomes to retain regardless of quality")
    qc_genomes_parser.add_argument('species_exception_file', help="file listing species names for select genomes to override NCBI names")
    qc_genomes_parser.add_argument('output_dir', help="output directory")
    qc_genomes_parser.add_argument('--min_comp', help='minimum completeness for a genome to be a type genome [0, 100]', type=float, default=DEFAULT_QC_MIN_COMP)
    qc_genomes_parser.add_argument('--max_cont', help='maximum contamination for a genome to be a type genome  [0, 100]', type=float, default=DEFAULT_QC_MAX_CONT)
    qc_genomes_parser.add_argument('--min_quality', help='minimum genome quality (comp - 5*cont) to be a type genome  [0, 100]', type=float, default=DEFAULT_QC_MIN_QUALITY)
    qc_genomes_parser.add_argument('--sh_exception', help='minimum strain heterogenity to retain genomes with upto 20%% contamination [0, 100]', type=float, default=DEFAULT_QC_SH_EXCEPTION)
    qc_genomes_parser.add_argument('--min_perc_markers', help='minimum percentage of bac120 or ar122 marker genes', type=float, default=DEFAULT_QC_MIN_PERC_MARKERS)
    qc_genomes_parser.add_argument('--max_contigs', help='maximum number of contigs for a genome to be a type genome', type=int, default=DEFAULT_QC_MAX_CONTIGS)
    qc_genomes_parser.add_argument('--min_N50', help='minimum N50 of scaffolds for a genome to be a type genome', type=int, default=DEFAULT_QC_MIN_N50)
    qc_genomes_parser.add_argument('--max_ambiguous', help='maximum number of ambiguous bases within contigs for a genome to be a type genome', type=int, default=DEFAULT_QC_MAX_AMBIGUOUS)
    qc_genomes_parser.add_argument('--silent', help="suppress output", action='store_true')

    # select representative for each validly or effectively published species name at NCBI
    select_type_genomes_parser = subparsers.add_parser('select_type_genomes',
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        description='Select type genomes for named species.')
    select_type_genomes_parser.add_argument('qc_file', help="file indicating genomes that have passed QC (qc_passed.tsv from qc_genomes)")
    select_type_genomes_parser.add_argument('gtdb_metadata_file', help="metadata file from GTDB with CheckM estimates for all genomes (TSV file)")
    select_type_genomes_parser.add_argument('ltp_blast_file', help="file with sequence similarity results between 16S rRNA genes and the LTP database")
    select_type_genomes_parser.add_argument('genome_path_file', help="file indicating path to genome files (TSV file)")
    select_type_genomes_parser.add_argument('prev_rep_file', help="list of previous type genomes to favour during selection")
    select_type_genomes_parser.add_argument('ncbi_refseq_assembly_file', help="NCBI RefSeq assembly file indicating potentially erroneous genomes")
    select_type_genomes_parser.add_argument('ncbi_genbank_assembly_file', help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    select_type_genomes_parser.add_argument('gtdb_domain_report', help="GTDB report of number of bac120 and ar122 marker genes (gtdb power domain_report)")
    select_type_genomes_parser.add_argument('species_exception_file', help="file listing species names for select genomes to override NCBI names")
    select_type_genomes_parser.add_argument('gtdb_type_genome_file', help="file listing manually selected type genomes")
    select_type_genomes_parser.add_argument('output_dir', help="output directory")
    select_type_genomes_parser.add_argument('--ani_cache_file', help='file with precomputed ANI and AF values')
    select_type_genomes_parser.add_argument('-c', '--cpus', help='number of cpus', type=int, default=1)
    select_type_genomes_parser.add_argument('--silent', help="suppress output", action='store_true')
    
    # cluster genomes to selected GTDB type genomes
    cluster_named_types_parser = subparsers.add_parser('cluster_named_types',
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        description='Cluster genomes to selected GTDB type genomes.')
    cluster_named_types_parser.add_argument('qc_file', help="file indicating genomes that have passed QC (qc_passed.tsv from qc_genomes)")
    cluster_named_types_parser.add_argument('gtdb_metadata_file', help="metadata file from GTDB with CheckM estimates for all genomes (TSV file)")
    cluster_named_types_parser.add_argument('genome_path_file', help="file indicating path to genome files (TSV file)")
    cluster_named_types_parser.add_argument('named_type_genome_file', help="file with type genomes selected for named species")
    cluster_named_types_parser.add_argument('type_genome_ani_file', help="file with pairwise ANI values between type genomes of named species")
    cluster_named_types_parser.add_argument('species_exception_file', help="file listing species names for select genomes to override NCBI names")
    cluster_named_types_parser.add_argument('output_dir', help="output directory")
    cluster_named_types_parser.add_argument('--ani_cache_file', help='file with precomputed ANI and AF values')
    cluster_named_types_parser.add_argument('--mash_sketch_file', help='file with Mash sketches for all type genomes')
    cluster_named_types_parser.add_argument('--ani_sp', help='minimum ANI for defining species clusters', type=float, default=95)
    cluster_named_types_parser.add_argument('--af_sp', help='minimum AF for defining species clusters', type=float, default=0.65)
    cluster_named_types_parser.add_argument('-c', '--cpus', help='number of cpus', type=int, default=1)
    cluster_named_types_parser.add_argument('--silent', help="suppress output", action='store_true')
    
    # infer de novo species clusters and type genomes for remaining genomes
    cluster_de_novo_parser = subparsers.add_parser('cluster_de_novo',
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        description='Infer de novo species clusters and type genomes for remaining genomes.')
    cluster_de_novo_parser.add_argument('qc_file', help="file indicating genomes that have passed QC (qc_passed.tsv from qc_genomes)")
    cluster_de_novo_parser.add_argument('gtdb_metadata_file', help="metadata file from GTDB with CheckM estimates for all genomes (TSV file)")
    cluster_de_novo_parser.add_argument('gtdb_user_genomes_file', help="file with GTDB User genomes and GenBank accessions to consider for cluster representatives (genbank_uba_accessions.tsv)")
    cluster_de_novo_parser.add_argument('genome_path_file', help="file indicating path to genome files (TSV file)")
    cluster_de_novo_parser.add_argument('type_genome_cluster_file', help="file with type genome clusters (output from cluster_named_types)")
    cluster_de_novo_parser.add_argument('type_genome_synonym_file', help="file with species names marked as synonyms (output from select_type_genomes)")
    cluster_de_novo_parser.add_argument('ncbi_refseq_assembly_file', help="NCBI RefSeq assembly file indicating potentially erroneous genomes")
    cluster_de_novo_parser.add_argument('ncbi_genbank_assembly_file', help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    cluster_de_novo_parser.add_argument('ani_af_nontype_vs_type', help="file with pairwise ANI values between type and nontype genomes (output from cluster_named_types)")
    cluster_de_novo_parser.add_argument('species_exception_file', help="file listing species names for select genomes to override NCBI names")
    cluster_de_novo_parser.add_argument('output_dir', help="output directory")
    cluster_de_novo_parser.add_argument('--ani_cache_file', help='file with precomputed ANI and AF values')
    cluster_de_novo_parser.add_argument('--ani_sp', help='minimum ANI for defining species clusters', type=float, default=95)
    cluster_de_novo_parser.add_argument('--af_sp', help='minimum AF for defining species clusters', type=float, default=0.65)
    cluster_de_novo_parser.add_argument('--rnd_type_genome', help="select random type genomes instead of ordering by genome quality", action='store_true')
    cluster_de_novo_parser.add_argument('-c', '--cpus', help='number of cpus', type=int, default=1)
    cluster_de_novo_parser.add_argument('--silent', help="suppress output", action='store_true')
    
    # cluster GTDB User genomes to representatives
    cluster_user_parser = subparsers.add_parser('cluster_user',
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        description='Cluster User genomes to GTDB species clusters, no new representatives are selected.')
    cluster_user_parser.add_argument('gtdb_metadata_file', help="metadata file from GTDB with CheckM estimates for all genomes (TSV file)")
    cluster_user_parser.add_argument('genome_path_file', help="file indicating path to genome files (TSV file)")
    cluster_user_parser.add_argument('final_cluster_file', help="file with final GTDB genome clusters (output from cluster_de_novo)")
    cluster_user_parser.add_argument('output_dir', help="output directory")
    cluster_user_parser.add_argument('--ani_cache_file', help='file with precomputed ANI and AF values')
    cluster_user_parser.add_argument('-c', '--cpus', help='number of cpus', type=int, default=1)
    cluster_user_parser.add_argument('--silent', help="suppress output", action='store_true')
    
    # infer de novo species clusters and type genomes for remaining genomes
    tree_gids = subparsers.add_parser('tree_gids',
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        description='Determine bacterial and archaeal genomes for canonical and validation trees.')
    tree_gids.add_argument('qc_file', help="file indicating genomes that have passed QC (qc_passed.tsv from qc_genomes)")
    tree_gids.add_argument('gtdb_metadata_file', help="metadata file from GTDB with CheckM estimates for all genomes (TSV file)")
    tree_gids.add_argument('gtdb_final_clusters', help="species clusters for GTDB (gtdb_clusters_final.tsv from cluster_de_novo")
    tree_gids.add_argument('species_exception_file', help="file listing species names for select genomes to override NCBI names")
    tree_gids.add_argument('output_dir', help='output directory')
    tree_gids.add_argument('--silent', help="suppress output", action='store_true')
    
    # identify new and updated genomes in current GTDB release
    u_new_genomes_parser = subparsers.add_parser('u_new_genomes',
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        description='Identify new and updated genomes in current GTDB release.')
    u_new_genomes_parser.add_argument('prev_gtdb_metadata_file', help="file with GTDB metadata for previous GTDB release (TSV file)")
    u_new_genomes_parser.add_argument('cur_gtdb_metadata_file', help="file with GTDB metadata for current GTDB release (TSV file)")
    u_new_genomes_parser.add_argument('cur_genome_paths', help="file with path to genomes in current GTDB release")
    u_new_genomes_parser.add_argument('ncbi_assembly_summary_genbank', help="file with NCBI metadata for GenBank genome assemblies")
    u_new_genomes_parser.add_argument('output_dir', help="output directory")
    u_new_genomes_parser.add_argument('--silent', help="suppress output", action='store_true')
    
    # quality check new and updated genomes
    u_qc_genomes_parser = subparsers.add_parser('u_qc_genomes',
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        description='Quality check new and updated genomes.')
    u_qc_genomes_parser.add_argument('cur_gtdb_metadata_file', help="file with GTDB metadata for current GTDB release (TSV file)")
    u_qc_genomes_parser.add_argument('cur_uba_gid_file', help="UBA genomes to process")
    u_qc_genomes_parser.add_argument('cur_genbank_assembly_file', help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    u_qc_genomes_parser.add_argument('cur_gtdb_domain_report', help="GTDB report of number of bac120 and ar122 marker genes (gtdb power domain_report)")
    u_qc_genomes_parser.add_argument('qc_exception_file', help="file listing genomes to retain regardless of quality")
    u_qc_genomes_parser.add_argument('output_dir', help="output directory")
    u_qc_genomes_parser.add_argument('--min_comp', help='minimum completeness for a genome to be a type genome [0, 100]', type=float, default=DEFAULT_QC_MIN_COMP)
    u_qc_genomes_parser.add_argument('--max_cont', help='maximum contamination for a genome to be a type genome  [0, 100]', type=float, default=DEFAULT_QC_MAX_CONT)
    u_qc_genomes_parser.add_argument('--min_quality', help='minimum genome quality (comp - 5*cont) to be a type genome  [0, 100]', type=float, default=DEFAULT_QC_MIN_QUALITY)
    u_qc_genomes_parser.add_argument('--sh_exception', help='minimum strain heterogenity to retain genomes with upto 20%% contamination [0, 100]', type=float, default=DEFAULT_QC_SH_EXCEPTION)
    u_qc_genomes_parser.add_argument('--min_perc_markers', help='minimum percentage of bac120 or ar122 marker genes', type=float, default=DEFAULT_QC_MIN_PERC_MARKERS)
    u_qc_genomes_parser.add_argument('--max_contigs', help='maximum number of contigs for a genome to be a type genome', type=int, default=DEFAULT_QC_MAX_CONTIGS)
    u_qc_genomes_parser.add_argument('--min_N50', help='minimum N50 of scaffolds for a genome to be a type genome', type=int, default=DEFAULT_QC_MIN_N50)
    u_qc_genomes_parser.add_argument('--max_ambiguous', help='maximum number of ambiguous bases within contigs for a genome to be a type genome', type=int, default=DEFAULT_QC_MAX_AMBIGUOUS)
    u_qc_genomes_parser.add_argument('--silent', help="suppress output", action='store_true')
        
    # perform initial classification of new and updated genomes using GTDB-Tk
    u_gtdbtk_parser = subparsers.add_parser('u_gtdbtk',
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        description='Perform initial classification of new and updated genomes using GTDB-Tk.')
    u_gtdbtk_parser.add_argument('genomes_new_updated_file', help="file indicating path to genomic file for new and updated genomes (u_new_genomes: genomes_new_updated.tsv)")
    u_gtdbtk_parser.add_argument('qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    u_gtdbtk_parser.add_argument('output_dir', help="output directory")
    u_gtdbtk_parser.add_argument('--batch_size', help="number of genome to process with GTDB-Tk in each batch", type=int, default=5000)
    u_gtdbtk_parser.add_argument('-c', '--cpus', help='number of cpus', type=int, default=1)
    u_gtdbtk_parser.add_argument('--silent', help="suppress output", action='store_true')
    
    # resolve cases where a species has multiple genomes assembled from the type strain
    u_resolve_types_parser = subparsers.add_parser('u_resolve_types',
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        description='Resolve cases where a species has multiple genomes assembled from the type strain.')
    u_resolve_types_parser.add_argument('cur_gtdb_metadata_file', help="file with GTDB metadata for current GTDB release (TSV file)")
    u_resolve_types_parser.add_argument('cur_genomic_path_file', help="file indicating path to current genomic FASTA files for genomes")
    u_resolve_types_parser.add_argument('gtdbtk_classify_file', help="file with GTDB-Tk classifications for new and updated genomes")
    u_resolve_types_parser.add_argument('qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    u_resolve_types_parser.add_argument('ncbi_genbank_assembly_file', help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    u_resolve_types_parser.add_argument('ltp_taxonomy_file', help="file with LTP taxonomy strings")
    u_resolve_types_parser.add_argument('gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    u_resolve_types_parser.add_argument('untrustworthy_type_ledger', help="file listing genomes that should be considered untrustworthy as type material")
    u_resolve_types_parser.add_argument('output_dir', help="output directory")
    u_resolve_types_parser.add_argument('--ani_cache_file', help='file with precomputed ANI and AF values')
    u_resolve_types_parser.add_argument('-c', '--cpus', help='number of cpus', type=int, default=1)
    u_resolve_types_parser.add_argument('--silent', help="suppress output", action='store_true')

    # identify species representatives that have changed from previous release
    u_rep_changes_parser = subparsers.add_parser('u_rep_changes',
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        description='Identify species representatives that have changed from previous release.')
    u_rep_changes_parser.add_argument('prev_gtdb_metadata_file', help="file with GTDB metadata for previous GTDB release (TSV file)")
    u_rep_changes_parser.add_argument('cur_gtdb_metadata_file', help="file with GTDB metadata for current GTDB release (TSV file)")
    u_rep_changes_parser.add_argument('cur_uba_gid_file', help="UBA genomes to process")
    u_rep_changes_parser.add_argument('genomes_new_updated_file', help="file indicating path to genomic file for new and updated genomes (u_new_genomes: genomes_new_updated.tsv)")
    u_rep_changes_parser.add_argument('qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    u_rep_changes_parser.add_argument('gtdbtk_classify_file', help="file with GTDB-Tk classifications for new and updated genomes")
    u_rep_changes_parser.add_argument('ncbi_genbank_assembly_file', help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    u_rep_changes_parser.add_argument('untrustworthy_type_file', help="file listing genomes that should be considered untrustworthy as type material (u_resolve_types_parser: untrustworthy_type_material.tsv)")
    u_rep_changes_parser.add_argument('gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    u_rep_changes_parser.add_argument('output_dir', help="output directory")
    u_rep_changes_parser.add_argument('--silent', help="suppress output", action='store_true')
    
    # perform initial actions required for changed representatives 
    u_rep_actions_parser = subparsers.add_parser('u_rep_actions',
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        description='Perform initial actions required for changed representatives.')
    u_rep_actions_parser.add_argument('rep_change_summary_file', help="file summarizing changes to representative genomes")
    u_rep_actions_parser.add_argument('prev_gtdb_metadata_file', help="file with GTDB metadata for previous GTDB release (TSV file)")
    u_rep_actions_parser.add_argument('prev_genomic_path_file', help="file indicating  path to previous genomic FASTA files for genomes")
    u_rep_actions_parser.add_argument('cur_gtdb_metadata_file', help="file with GTDB metadata for current GTDB release (TSV file)")
    u_rep_actions_parser.add_argument('cur_genomic_path_file', help="file indicating path to current genomic FASTA files for genomes")
    u_rep_actions_parser.add_argument('uba_genome_paths', help="file indicating path to genomic FASTA files for UBA genomes")
    u_rep_actions_parser.add_argument('genomes_new_updated_file', help="file indicating path to genomic file for new and updated genomes (u_new_genomes: genomes_new_updated.tsv)")
    u_rep_actions_parser.add_argument('qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    u_rep_actions_parser.add_argument('gtdbtk_classify_file', help="file with GTDB-Tk classifications for new and updated genomes")
    u_rep_actions_parser.add_argument('ncbi_genbank_assembly_file', help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    u_rep_actions_parser.add_argument('untrustworthy_type_file', help="file listing genomes that should be considered untrustworthy as type material (u_resolve_types_parser: untrustworthy_type_material.tsv)")
    u_rep_actions_parser.add_argument('gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    u_rep_actions_parser.add_argument('sp_priority_ledger', help="file resolving nomenclatural priority of species names")
    u_rep_actions_parser.add_argument('output_dir', help="output directory")
    u_rep_actions_parser.add_argument('--ani_cache_file', help='file with precomputed ANI and AF values')
    u_rep_actions_parser.add_argument('-c', '--cpus', help='number of cpus', type=int, default=1)
    u_rep_actions_parser.add_argument('--silent', help="suppress output", action='store_true')

    # select representative for each validly or effectively published species name at NCBI
    u_sel_reps_parser = subparsers.add_parser('u_sel_reps',
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        description='Select representatives for all named species at NCBI.')
    u_sel_reps_parser.add_argument('updated_sp_cluster_file', help="file indicating existing species representatives (u_rep_actions: updated_sp_clusters.tsv)")
    u_sel_reps_parser.add_argument('cur_gtdb_metadata_file', help="file with GTDB metadata for current GTDB release (TSV file)")
    u_sel_reps_parser.add_argument('cur_genomic_path_file', help="file indicating path to current genomic FASTA files for genomes")
    u_sel_reps_parser.add_argument('uba_genome_paths', help="file indicating path to genomic FASTA files for UBA genomes")
    u_sel_reps_parser.add_argument('qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    u_sel_reps_parser.add_argument('gtdbtk_classify_file', help="file with GTDB-Tk classifications for new and updated genomes")
    u_sel_reps_parser.add_argument('ncbi_genbank_assembly_file', help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    u_sel_reps_parser.add_argument('untrustworthy_type_file', help="file listing genomes that should be considered untrustworthy as type material (u_resolve_types: untrustworthy_type_material.tsv)")
    u_sel_reps_parser.add_argument('gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    u_sel_reps_parser.add_argument('sp_priority_ledger', help="file resolving nomenclatural priority of species names")
    u_sel_reps_parser.add_argument('output_dir', help="output directory")
    u_sel_reps_parser.add_argument('--ani_cache_file', help='file with precomputed ANI and AF values')
    u_sel_reps_parser.add_argument('-c', '--cpus', help='number of cpus', type=int, default=1)
    u_sel_reps_parser.add_argument('--silent', help="suppress output", action='store_true')
    
    # cluster genomes to selected GTDB type genomes
    u_cluster_named_reps_parser = subparsers.add_parser('u_cluster_named_reps',
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        description='Cluster genomes to selected GTDB representatives.')
    u_cluster_named_reps_parser.add_argument('named_rep_file', help="file with representatives selected for named species (u_sel_reps: gtdb_named_reps_final.tsv)")
    u_cluster_named_reps_parser.add_argument('cur_gtdb_metadata_file', help="file with GTDB metadata for current GTDB release (TSV file)")
    u_cluster_named_reps_parser.add_argument('cur_genomic_path_file', help="file indicating path to current genomic FASTA files for genomes")
    u_cluster_named_reps_parser.add_argument('uba_genome_paths', help="file indicating path to genomic FASTA files for UBA genomes")
    u_cluster_named_reps_parser.add_argument('qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    u_cluster_named_reps_parser.add_argument('gtdbtk_classify_file', help="file with GTDB-Tk classifications for new and updated genomes")
    u_cluster_named_reps_parser.add_argument('ncbi_genbank_assembly_file', help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    u_cluster_named_reps_parser.add_argument('untrustworthy_type_file', help="file listing genomes that should be considered untrustworthy as type material (u_resolve_types: untrustworthy_type_material.tsv)")
    u_cluster_named_reps_parser.add_argument('rep_mash_sketch_file', help="file with Mash sketch for representative genomes (u_sel_reps: gtdb_reps.msh)")
    u_cluster_named_reps_parser.add_argument('rep_ani_file', help="file with pairwise ANI values between representative genomes of named species (u_sel_reps: gtdb_rep_pairwise_ani.tsv)")
    u_cluster_named_reps_parser.add_argument('gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    u_cluster_named_reps_parser.add_argument('output_dir', help="output directory")
    u_cluster_named_reps_parser.add_argument('--ani_cache_file', help='file with precomputed ANI and AF values')
    u_cluster_named_reps_parser.add_argument('--ani_sp', help='minimum ANI for defining species clusters', type=float, default=95)
    u_cluster_named_reps_parser.add_argument('--af_sp', help='minimum AF for defining species clusters', type=float, default=0.65)
    u_cluster_named_reps_parser.add_argument('-c', '--cpus', help='number of cpus', type=int, default=1)
    u_cluster_named_reps_parser.add_argument('--silent', help="suppress output", action='store_true')
    
    # determine synonyms for validly or effectively published species
    u_synonyms_parser = subparsers.add_parser('u_synonyms',
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        description='Determine synonyms for validly or effectively published species.')
    u_synonyms_parser.add_argument('named_cluster_file', help="file with named GTDB clusters (u_cluster_named_reps: gtdb_named_rep_clusters.tsv)")
    u_synonyms_parser.add_argument('cur_gtdb_metadata_file', help="file with GTDB metadata for current GTDB release (TSV file)")
    u_synonyms_parser.add_argument('uba_genome_paths', help="file indicating path to genomic FASTA files for UBA genomes")
    u_synonyms_parser.add_argument('qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    u_synonyms_parser.add_argument('gtdbtk_classify_file', help="file with GTDB-Tk classifications for new and updated genomes")
    u_synonyms_parser.add_argument('ncbi_genbank_assembly_file', help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    u_synonyms_parser.add_argument('untrustworthy_type_file', help="file listing genomes that should be considered untrustworthy as type material (u_resolve_types: untrustworthy_type_material.tsv)")
    u_synonyms_parser.add_argument('ani_af_rep_vs_nonrep', help="file with pairwise ANI values between representative and non-representative genomes (u_cluster_named_reps: ani_af_rep_vs_nonrep.pkl)")
    u_synonyms_parser.add_argument('gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    u_synonyms_parser.add_argument('sp_priority_ledger', help="file resolving nomenclatural priority of species names")
    u_synonyms_parser.add_argument('output_dir', help="output directory")
    u_synonyms_parser.add_argument('--silent', help="suppress output", action='store_true')
    
    # infer de novo species clusters and type genomes for remaining genomes
    u_cluster_de_novo_parser = subparsers.add_parser('u_cluster_de_novo',
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        description='Infer de novo species clusters and representatives for remaining genomes.')
    u_cluster_de_novo_parser.add_argument('named_cluster_file', help="file with named GTDB clusters (u_cluster_named_reps: gtdb_named_rep_clusters.tsv)")
    u_cluster_de_novo_parser.add_argument('cur_gtdb_metadata_file', help="file with GTDB metadata for current GTDB release (TSV file)")
    u_cluster_de_novo_parser.add_argument('cur_genomic_path_file', help="file indicating path to current genomic FASTA files for genomes")
    u_cluster_de_novo_parser.add_argument('uba_genome_paths', help="file indicating path to genomic FASTA files for UBA genomes")
    u_cluster_de_novo_parser.add_argument('qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    u_cluster_de_novo_parser.add_argument('gtdbtk_classify_file', help="file with GTDB-Tk classifications for new and updated genomes")
    u_cluster_de_novo_parser.add_argument('ncbi_genbank_assembly_file', help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    u_cluster_de_novo_parser.add_argument('untrustworthy_type_file', help="file listing genomes that should be considered untrustworthy as type material (u_resolve_types: untrustworthy_type_material.tsv)")
    u_cluster_de_novo_parser.add_argument('ani_af_rep_vs_nonrep', help="file with pairwise ANI values between representative and non-representative genomes (u_cluster_named_reps: ani_af_rep_vs_nonrep.pkl)")
    u_cluster_de_novo_parser.add_argument('gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    u_cluster_de_novo_parser.add_argument('output_dir', help="output directory")
    u_cluster_de_novo_parser.add_argument('--ani_cache_file', help='file with precomputed ANI and AF values')
    u_cluster_de_novo_parser.add_argument('--ani_sp', help='minimum ANI for defining species clusters', type=float, default=95)
    u_cluster_de_novo_parser.add_argument('--af_sp', help='minimum AF for defining species clusters', type=float, default=0.65)
    u_cluster_de_novo_parser.add_argument('-c', '--cpus', help='number of cpus', type=int, default=1)
    u_cluster_de_novo_parser.add_argument('--silent', help="suppress output", action='store_true')
    
    # establish names for each GTDB species cluster
    u_species_names_parser = subparsers.add_parser('u_species_names',
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        description='Update names of GTDB species clusters.')
    u_species_names_parser.add_argument('gtdb_clusters_file', help="file indicating representatives of each GTDB species cluster (u_cluster_de_novo: gtdb_clusters_de_novo.tsv")
    u_species_names_parser.add_argument('prev_gtdb_metadata_file', help="file with GTDB metadata for previous GTDB release (TSV file)")
    u_species_names_parser.add_argument('prev_genomic_path_file', help="file indicating  path to previous genomic FASTA files for genomes")
    u_species_names_parser.add_argument('cur_gtdb_metadata_file', help="file with GTDB metadata for current GTDB release (TSV file)")
    u_species_names_parser.add_argument('cur_genomic_path_file', help="file indicating path to current genomic FASTA files for genomes")
    u_species_names_parser.add_argument('uba_genome_paths', help="file indicating path to genomic FASTA files for UBA genomes")
    u_species_names_parser.add_argument('qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    u_species_names_parser.add_argument('gtdbtk_classify_file', help="file with GTDB-Tk classifications for new and updated genomes")
    u_species_names_parser.add_argument('ncbi_genbank_assembly_file', help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    u_species_names_parser.add_argument('untrustworthy_type_file', help="file listing genomes that should be considered untrustworthy as type material (u_resolve_types: untrustworthy_type_material.tsv)")
    u_species_names_parser.add_argument('synonym_file', help="file with species names marked as synonyms (u_synonyms: synonyms.tsv)")
    u_species_names_parser.add_argument('gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    u_species_names_parser.add_argument('sp_priority_ledger', help="file resolving nomenclatural priority of species names")
    u_species_names_parser.add_argument('gtdb_taxa_updates_ledger', help="file indicating explicit updates to taxa relative to last GTDB release")
    u_species_names_parser.add_argument('dsmz_bacnames_file', help="table from lpsn.dsmz.de with nomenclature information")
    u_species_names_parser.add_argument('output_dir', help="output directory")
    u_species_names_parser.add_argument('--ani_cache_file', help='file with precomputed ANI and AF values')
    u_species_names_parser.add_argument('-c', '--cpus', help='number of cpus', type=int, default=1)
    u_species_names_parser.add_argument('--silent', help="suppress output", action='store_true')

    # summary statistics indicating changes to GTDB species clusters
    u_summary_stats_parser = subparsers.add_parser('u_summary_stats',
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        description='Summary statistics indicating changes to GTDB species clusters.')
    u_summary_stats_parser.add_argument('updated_sp_rep_file', help="file indicating changes to GTDB representatives (u_rep_actions: updated_species_reps.tsv")
    u_summary_stats_parser.add_argument('gtdb_clusters_file', help="file indicating representatives of each GTDB species cluster (u_cluster_de_novo: gtdb_clusters_de_novo.tsv")
    u_summary_stats_parser.add_argument('prev_gtdb_metadata_file', help="file with GTDB metadata for previous GTDB release (TSV file)")
    u_summary_stats_parser.add_argument('cur_gtdb_metadata_file', help="file with GTDB metadata for current GTDB release (TSV file)")
    u_summary_stats_parser.add_argument('uba_genome_paths', help="file indicating path to genomic FASTA files for UBA genomes")
    u_summary_stats_parser.add_argument('qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    u_summary_stats_parser.add_argument('gtdbtk_classify_file', help="file with GTDB-Tk classifications for new and updated genomes")
    u_summary_stats_parser.add_argument('ncbi_genbank_assembly_file', help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    u_summary_stats_parser.add_argument('untrustworthy_type_file', help="file listing genomes that should be considered untrustworthy as type material (u_resolve_types: untrustworthy_type_material.tsv)")
    u_summary_stats_parser.add_argument('synonym_file', help="file with species names marked as synonyms (u_synonyms: synonyms.tsv)")
    u_summary_stats_parser.add_argument('gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    u_summary_stats_parser.add_argument('output_dir', help="output directory")
    u_summary_stats_parser.add_argument('--silent', help="suppress output", action='store_true')

    # compare current and previous representatives
    merge_test_parser = subparsers.add_parser('merge_test',
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        description='Produce information relevant to merging two sister species.')
    merge_test_parser.add_argument('gtdb_metadata_file', help="file with GTDB metadata (TSV file)")
    merge_test_parser.add_argument('genome_path_file', help="file indicating data directory for GTDB genomes")
    merge_test_parser.add_argument('species1', help="species to inspect for merging")
    merge_test_parser.add_argument('species2', help="species to inspect for merging")
    merge_test_parser.add_argument('output_dir', help="output directory")
    merge_test_parser.add_argument('--ani_cache_file', help='file with precomputed ANI and AF values')
    merge_test_parser.add_argument('-c', '--cpus', help='number of cpus', type=int, default=1)
    merge_test_parser.add_argument('--silent', help="suppress output", action='store_true')

    # compare current and previous representatives
    rep_compare_parser = subparsers.add_parser('rep_compare',
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        description='Compare current and previous representatives.')
    rep_compare_parser.add_argument('cur_metadata_file', help="metadata file for all genomes in current GTDB release")
    rep_compare_parser.add_argument('prev_metadata_file', help="metadata file for all genomes in previous GTDB release")
    rep_compare_parser.add_argument('--silent', help="suppress output", action='store_true')
    
    # cluster genomes to selected GTDB type genomes
    cluster_stats_parser = subparsers.add_parser('cluster_stats',
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                        description='Calculate statistics for species clusters.')
    cluster_stats_parser.add_argument('cluster_file', help='file specifying species clusters')
    cluster_stats_parser.add_argument('genome_path_file', help="file indicating path to genome files (TSV file)")
    cluster_stats_parser.add_argument('gtdb_metadata_file', help="metadata file from GTDB with NCBI taxonomy information (TSV file)")
    cluster_stats_parser.add_argument('output_dir', help="output directory")
    cluster_stats_parser.add_argument('--ani_cache_file', help='file with precomputed ANI and AF values')
    cluster_stats_parser.add_argument('--max_genomes', help='maximum randomly selected genomes to consider in a species cluster', type=int, default=100)
    cluster_stats_parser.add_argument('--af_sp', help='minimum AF for defining species clusters', type=float, default=0.65)
    cluster_stats_parser.add_argument('-c', '--cpus', help='number of cpus', type=int, default=1)
    cluster_stats_parser.add_argument('--silent', help="suppress output", action='store_true')

    # get and check options
    args = None
    if(len(sys.argv) == 1 or sys.argv[1] == '-h' or sys.argv == '--help'):
        print_help()
        sys.exit(0)
    else:
        args = parser.parse_args()

    try:
        logger_setup(args.output_dir, args.silent)
    except:
        logger_setup(None, args.silent)

    # do what we came here to do
    try:
        parser = OptionsParser()
        if(False):
            # import pstats
            # p = pstats.Stats('prof')
            # p.sort_stats('cumulative').print_stats(10)
            # p.sort_stats('time').print_stats(10)
            import cProfile
            cProfile.run('parser.parse_options(args)', 'prof')
        elif False:
            import pdb
            pdb.run(parser.parse_options(args))
        else:
            parser.parse_options(args)
    except SystemExit:
        print("\n  Controlled exit resulting from an unrecoverable error or warning.")
    except:
        print("\nUnexpected error:", sys.exc_info()[0])
        raise
