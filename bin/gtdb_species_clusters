#!/usr/bin/env python3

###############################################################################
#                                                                             #
#    This program is free software: you can redistribute it and/or modify     #
#    it under the terms of the GNU General Public License as published by     #
#    the Free Software Foundation, either version 3 of the License, or        #
#    (at your option) any later version.                                      #
#                                                                             #
#    This program is distributed in the hope that it will be useful,          #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
#    GNU General Public License for more details.                             #
#                                                                             #
#    You should have received a copy of the GNU General Public License        #
#    along with this program. If not, see <http://www.gnu.org/licenses/>.     #
#                                                                             #
###############################################################################

__author__ = "Donovan Parks"
__copyright__ = "Copyright 2015"
__credits__ = ["Donovan Parks"]
__license__ = "GPL3"
__maintainer__ = "Donovan Parks"
__email__ = "donovan.parks@gmail.com"
__status__ = "Development"

import argparse
import logging
import ntpath
import os
import sys

from biolib.common import make_sure_path_exists

from gtdb_species_clusters import __version__
from gtdb_species_clusters.main import OptionsParser
from gtdb_species_clusters import defaults as Defaults


def print_help():
    """Help menu."""

    print('')
    print('                ...::: GTDB Species Clusters v' +
          __version__ + ' :::...''')
    print('''\

    Update species clusters:
      u_new_genomes        -> Identify new and updated genomes in current GTDB release
      u_qc_genomes         -> Quality check new and updated genomes
      u_gtdbtk             -> Perform initial classification of new and updated genomes using GTDB-Tk
      u_lpsn_rna_types     -> Identify type genomes based on type 16S rRNA sequences indicated at LPSN
      u_update_ani_cache   -> Update ANI cache to remove entries for updates genomes
      u_resolve_types      -> Resolve cases where a species has multiple genomes assembled from the type strain
      u_rep_changes        -> Identify lost, updated, reassigned, and unchanged species representatives
      u_rep_actions        -> Perform initial actions required for modified representatives
      u_sel_reps           -> Select representatives for all named species at NCBI
      u_cluster_named_reps -> Cluster genomes to selected GTDB representatives
      u_cluster_de_novo    -> Infer de novo species clusters and representatives for remaining genomes
      u_cluster_stats      -> Summary statistics indicating changes to GTDB species cluster membership
      u_ncbi_erroneous     -> Identify genomes with erroneous NCBI species assignments under the GTDB
      u_synonyms           -> Determine synonyms for validly or effectively published species
      u_curation_trees     -> Produce curation trees highlighting new NCBI taxa
      u_species_init       -> Produce initial best guess at names for GTDB species clusters
      u_pmc_species_names  -> Refine species names using post-manual curation rules
      ( ... u_pmc_species_names must be run for Bacteria and Archaea ...)

      ( ... update GTDB clustering in database; must be done before creating ARB DB file ...)
      ( ... infer trees: https://github.com/Ecogenomics/GTDBNCBI/wiki/Infer-and-decorate-tree-for-new-release ...)
      ( ... manual curation ... )

    Post-manual curation
      pmc_manual_species     -> Identify species names manually set by curators
      pmc_replace_generic    -> Replace generic names with genus assignment
      pmc_species_names      -> Establish final species names based on manual curation
      pmc_check_type_species -> Check for agreement between GTDB genera and genomes assembled from type species of genus
      pmc_check_type_strains -> Check for agreement between GTDB species and genomes assembled from type strain of species
      pmc_validate           -> Validate final species names
      pmc_name_stats         -> [TBD] Summary statistics indicating changes to GTDB species cluster names
      pmc_cluster_stats      -> Calculate final statistics for species clusters (???)

    Inspect species clusters:
      merge_test      -> Produce information relevant to merging two sister species
      ani_sp_pair     -> Calculate all pairwise ANI/AF values between genomes in two species
      intra_sp_derep  -> Dereplicate GTDB species clusters using ANI/AF criteria
      intra_genus_ani -> Calculate intra-genus ANI/AF values between GTDB representative genomes
      ani_af_reps     -> Calculate ANI/AF between GTDB representative genomes with the same genus

    Inspect genomes:
      type_status -> Report information related to a genome being type material

    Other:
      rep_compare         -> Compare current and previous representatives

    Debug and inspection:
      sandbox -> Playground to explore new ideas or calculate one off statistics related to species clusters

  Use: gtdb_species_clusters <command> -h for command specific help.

  Feature requests or bug reports can be sent to Donovan Parks (donovan.parks@gmail.com)
    or posted on GitHub (https://github.com/Ecogenomics/gtdb-species-clusters).
    ''')


def logger_setup(output_dir, silent):
    """Set logging for application.

    Parameters
    ----------
    output_dir : str
        Output directory for log file.
    silent : boolean
        Flag indicating if output to stdout should be suppressed.
    """

    # setup general properties of logger
    logger = logging.getLogger('')
    logger.setLevel(logging.DEBUG)
    log_format = logging.Formatter(fmt="[%(asctime)s] %(levelname)s: %(message)s",
                                   datefmt="%Y-%m-%d %H:%M:%S")

    # setup logging to console
    if not silent:
        stream_logger = logging.StreamHandler(sys.stdout)
        stream_logger.setFormatter(log_format)
        stream_logger.setLevel(logging.DEBUG)
        logger.addHandler(stream_logger)

    if output_dir:
        make_sure_path_exists(output_dir)
        file_logger = logging.FileHandler(os.path.join(
            output_dir, 'gtdb_species_clusters.log'), 'a')
        file_logger.setFormatter(log_format)
        logger.addHandler(file_logger)

    logger.info('GTDB Species Clusters v%s' % __version__)
    logger.info(ntpath.basename(sys.argv[0]) + ' ' + ' '.join(sys.argv[1:]))


if __name__ == '__main__':

    # initialize the options parser
    parser = argparse.ArgumentParser(add_help=False)
    subparsers = parser.add_subparsers(help="--", dest='subparser_name')

    # identify new and updated genomes in current GTDB release
    u_new_genomes_parser = subparsers.add_parser('u_new_genomes',
                                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                                 description='Identify new and updated genomes in current GTDB release.')
    u_new_genomes_parser.add_argument('prev_gtdb_metadata_file',
                                      help="file with GTDB metadata for previous GTDB release (TSV file)")
    u_new_genomes_parser.add_argument('cur_gtdb_metadata_file',
                                      help="file with GTDB metadata for current GTDB release (TSV file)")
    u_new_genomes_parser.add_argument(
        'cur_genome_paths', help="file with path to genomes in current GTDB release")
    u_new_genomes_parser.add_argument('ncbi_assembly_summary_genbank',
                                      help="file with NCBI metadata for GenBank genome assemblies")
    u_new_genomes_parser.add_argument('output_dir', help="output directory")
    u_new_genomes_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # quality check new and updated genomes
    u_qc_genomes_parser = subparsers.add_parser('u_qc_genomes',
                                                formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                                description='Quality check new and updated genomes.')
    u_qc_genomes_parser.add_argument('prev_gtdb_metadata_file',
                                     help="file with GTDB metadata for previous GTDB release (TSV file)")
    u_qc_genomes_parser.add_argument('cur_gtdb_metadata_file',
                                     help="file with GTDB metadata for current GTDB release (TSV file)")
    u_qc_genomes_parser.add_argument('cur_genbank_assembly_file',
                                     help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    u_qc_genomes_parser.add_argument(
        'cur_gtdb_domain_report', help="GTDB report of number of bac120 and ar122 marker genes (gtdb power domain_report)")
    u_qc_genomes_parser.add_argument(
        'gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    u_qc_genomes_parser.add_argument(
        'qc_exception_file', help="file listing genomes to retain regardless of quality")
    u_qc_genomes_parser.add_argument(
        'ncbi_env_bioproject_ledger', help="file indicating NCBI BioProjects composed on MAGs or SAGs incorrectly annotated at NCBI")
    u_qc_genomes_parser.add_argument('output_dir', help="output directory")
    u_qc_genomes_parser.add_argument(
        '--min_comp', help='minimum completeness for a genome to be a type genome [0, 100]', type=float, default=Defaults.QC_MIN_COMP)
    u_qc_genomes_parser.add_argument(
        '--max_cont', help='maximum contamination for a genome to be a type genome  [0, 100]', type=float, default=Defaults.QC_MAX_CONT)
    u_qc_genomes_parser.add_argument(
        '--min_quality', help='minimum genome quality (comp - 5*cont) to be a type genome  [0, 100]', type=float, default=Defaults.QC_MIN_QUALITY)
    u_qc_genomes_parser.add_argument(
        '--sh_exception', help='minimum strain heterogenity to retain genomes with upto 20%% contamination [0, 100]', type=float, default=Defaults.QC_SH_EXCEPTION)
    u_qc_genomes_parser.add_argument(
        '--min_perc_markers', help='minimum percentage of bac120 or ar122 marker genes', type=float, default=Defaults.QC_MIN_PERC_MARKERS)
    u_qc_genomes_parser.add_argument(
        '--max_contigs', help='maximum number of contigs for a genome to be a type genome', type=int, default=Defaults.QC_MAX_CONTIGS)
    u_qc_genomes_parser.add_argument(
        '--min_N50', help='minimum N50 of scaffolds for a genome to be a type genome', type=int, default=Defaults.QC_MIN_N50)
    u_qc_genomes_parser.add_argument(
        '--max_ambiguous', help='maximum number of ambiguous bases within contigs for a genome to be a type genome', type=int, default=Defaults.QC_MAX_AMBIGUOUS)
    u_qc_genomes_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # perform initial classification of new and updated genomes using GTDB-Tk
    u_gtdbtk_parser = subparsers.add_parser('u_gtdbtk',
                                            formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                            description='Perform initial classification of new and updated genomes using GTDB-Tk.')
    u_gtdbtk_parser.add_argument(
        'genomes_new_updated_file', help="file indicating path to genomic file for new and updated genomes (u_new_genomes: genomes_new_updated.tsv)")
    u_gtdbtk_parser.add_argument(
        'qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    u_gtdbtk_parser.add_argument('output_dir', help="output directory")
    u_gtdbtk_parser.add_argument(
        '--batch_size', help="number of genome to process with GTDB-Tk in each batch", type=int, default=5000)
    u_gtdbtk_parser.add_argument(
        '-c', '--cpus', help='number of cpus', type=int, default=1)
    u_gtdbtk_parser.add_argument('--silent', help="suppress output", action='store_true')

    # identify type genomes based on type 16S rRNA sequences indicated at LPSN
    u_lpsn_rna_types_parser = subparsers.add_parser('u_lpsn_rna_types',
                                                    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                                    description='Identify type genomes based on type 16S rRNA sequences indicated at LPSN.')
    u_lpsn_rna_types_parser.add_argument(
        'lpsn_metadata_file', help="file with metadata for all taxa at LPSN")
    u_lpsn_rna_types_parser.add_argument(
        'cur_gtdb_metadata_file', help="file with GTDB metadata for current GTDB release (TSV file)")
    u_lpsn_rna_types_parser.add_argument(
        'cur_genomic_path_file', help="file indicating path to current genomic FASTA files for genomes")
    u_lpsn_rna_types_parser.add_argument(
        'qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    u_lpsn_rna_types_parser.add_argument('ncbi_genbank_assembly_file',
                                         help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    u_lpsn_rna_types_parser.add_argument(
        'gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    u_lpsn_rna_types_parser.add_argument(
        'untrustworthy_type_ledger', help="file listing genomes that should be considered untrustworthy as type material")
    u_lpsn_rna_types_parser.add_argument('output_dir', help="output directory")
    u_lpsn_rna_types_parser.add_argument(
        '-c', '--cpus', help='number of cpus', type=int, default=1)
    u_lpsn_rna_types_parser.add_argument('--silent', help="suppress output", action='store_true')

    # update ANI cache to remove entries for updates genomes
    u_update_ani_cache_parser = subparsers.add_parser('u_update_ani_cache',
                                                   formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                                   description='Update ANI cache to remove entries for updates genomes.')
    u_update_ani_cache_parser.add_argument(
        'genomes_new_updated_file', help="file indicating new and updated genomes (u_new_genomes: genomes_new_updated.tsv)")
    u_update_ani_cache_parser.add_argument('prev_ani_cache', help="ANI cache file from previous GTDB release")
    u_update_ani_cache_parser.add_argument('out_ani_cache', help="updated ANI cache file")
    u_update_ani_cache_parser.add_argument('--silent', help="suppress output", action='store_true')

    # resolve cases where a species has multiple genomes assembled from the type strain
    u_resolve_types_parser = subparsers.add_parser('u_resolve_types',
                                                   formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                                   description='Resolve cases where a species has multiple genomes assembled from the type strain.')
    u_resolve_types_parser.add_argument(
        'cur_gtdb_metadata_file', help="file with GTDB metadata for current GTDB release (TSV file)")
    u_resolve_types_parser.add_argument(
        'cur_genomic_path_file', help="file indicating path to current genomic FASTA files for genomes")
    u_resolve_types_parser.add_argument(
        'qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    u_resolve_types_parser.add_argument('ncbi_genbank_assembly_file',
                                        help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    u_resolve_types_parser.add_argument(
        'ltp_taxonomy_file', help="file with LTP taxonomy strings")
    u_resolve_types_parser.add_argument(
        'gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    u_resolve_types_parser.add_argument(
        'untrustworthy_type_ledger', help="file listing genomes that should be considered untrustworthy as type material")
    u_resolve_types_parser.add_argument(
        'ncbi_env_bioproject_ledger', help="file indicating NCBI BioProjects composed on MAGs or SAGs incorrectly annotated at NCBI")
    u_resolve_types_parser.add_argument('output_dir', help="output directory")
    u_resolve_types_parser.add_argument(
        '--ani_cache_file', help='file with precomputed ANI and AF values')
    u_resolve_types_parser.add_argument(
        '-c', '--cpus', help='number of cpus', type=int, default=1)
    u_resolve_types_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # identify species representatives that have changed from previous release
    u_rep_changes_parser = subparsers.add_parser('u_rep_changes',
                                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                                 description='Identify species representatives that have changed from previous release.')
    u_rep_changes_parser.add_argument('prev_gtdb_metadata_file',
                                      help="file with GTDB metadata for previous GTDB release (TSV file)")
    u_rep_changes_parser.add_argument('cur_gtdb_metadata_file',
                                      help="file with GTDB metadata for current GTDB release (TSV file)")
    u_rep_changes_parser.add_argument(
        'genomes_new_updated_file', help="file indicating path to genomic file for new and updated genomes (u_new_genomes: genomes_new_updated.tsv)")
    u_rep_changes_parser.add_argument(
        'qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    u_rep_changes_parser.add_argument(
        'gtdbtk_classify_file', help="file with GTDB-Tk classifications for new and updated genomes (u_gtdbtk: gtdbtk_classify.tsv)")
    u_rep_changes_parser.add_argument('ncbi_genbank_assembly_file',
                                      help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    u_rep_changes_parser.add_argument(
        'untrustworthy_type_file', help="file listing genomes that should be considered untrustworthy as type material (u_resolve_types: untrustworthy_type_material.tsv)")
    u_rep_changes_parser.add_argument(
        'disband_cluster_ledger', help="file listing GTDB cluster declared to be erroneous that should be disbanded")
    u_rep_changes_parser.add_argument(
        'gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    u_rep_changes_parser.add_argument(
        'ncbi_env_bioproject_ledger', help="file indicating NCBI BioProjects composed on MAGs or SAGs incorrectly annotated at NCBI")
    u_rep_changes_parser.add_argument('output_dir', help="output directory")
    u_rep_changes_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # perform initial actions required for changed representatives
    u_rep_actions_parser = subparsers.add_parser('u_rep_actions',
                                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                                 description='Perform initial actions required for changed representatives.')
    u_rep_actions_parser.add_argument('rep_change_summary_file',
                                      help="file summarizing changes to representative genomes")
    u_rep_actions_parser.add_argument('prev_gtdb_metadata_file',
                                      help="file with GTDB metadata for previous GTDB release (TSV file)")
    u_rep_actions_parser.add_argument('prev_genomic_path_file',
                                      help="file indicating  path to previous genomic FASTA files for genomes")
    u_rep_actions_parser.add_argument('cur_gtdb_metadata_file',
                                      help="file with GTDB metadata for current GTDB release (TSV file)")
    u_rep_actions_parser.add_argument(
        'cur_genomic_path_file', help="file indicating path to current genomic FASTA files for genomes")
    u_rep_actions_parser.add_argument(
        'genomes_new_updated_file', help="file indicating path to genomic file for new and updated genomes (u_new_genomes: genomes_new_updated.tsv)")
    u_rep_actions_parser.add_argument(
        'qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    u_rep_actions_parser.add_argument(
        'gtdbtk_classify_file', help="file with GTDB-Tk classifications for new and updated genomes  (u_gtdbtk: gtdbtk_classify.tsv)")
    u_rep_actions_parser.add_argument('ncbi_genbank_assembly_file',
                                      help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    u_rep_actions_parser.add_argument(
        'untrustworthy_type_file', help="file listing genomes that should be considered untrustworthy as type material (u_resolve_types: untrustworthy_type_material.tsv)")
    u_rep_actions_parser.add_argument(
        'gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    u_rep_actions_parser.add_argument(
        'sp_priority_ledger', help="file resolving nomenclatural priority of species names")
    u_rep_actions_parser.add_argument(
        'genus_priority_ledger', help="file resolving nomenclatural priority of genus names")
    u_rep_actions_parser.add_argument(
        'ncbi_env_bioproject_ledger', help="file indicating NCBI BioProjects composed on MAGs or SAGs incorrectly annotated at NCBI")
    u_rep_actions_parser.add_argument(
        'lpsn_gss_file', help="table from lpsn.dsmz.de with nomenclature information (lpsn_gss_<date>.csv)")
    u_rep_actions_parser.add_argument('output_dir', help="output directory")
    u_rep_actions_parser.add_argument(
        '--ani_cache_file', help='file with precomputed ANI and AF values')
    u_rep_actions_parser.add_argument(
        '-c', '--cpus', help='number of cpus', type=int, default=1)
    u_rep_actions_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # select representative for each validly or effectively published species name at NCBI
    u_sel_reps_parser = subparsers.add_parser('u_sel_reps',
                                              formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                              description='Select representatives for all named species at NCBI.')
    u_sel_reps_parser.add_argument(
        'updated_sp_cluster_file', help="file indicating existing species representatives (u_rep_actions: updated_sp_clusters.tsv)")
    u_sel_reps_parser.add_argument('cur_gtdb_metadata_file',
                                   help="file with GTDB metadata for current GTDB release (TSV file)")
    u_sel_reps_parser.add_argument('cur_genomic_path_file',
                                   help="file indicating path to current genomic FASTA files for genomes")
    u_sel_reps_parser.add_argument(
        'qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    u_sel_reps_parser.add_argument('ncbi_genbank_assembly_file',
                                   help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    u_sel_reps_parser.add_argument(
        'untrustworthy_type_file', help="file listing genomes that should be considered untrustworthy as type material (u_resolve_types: untrustworthy_type_material.tsv)")
    u_sel_reps_parser.add_argument(
        'gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    u_sel_reps_parser.add_argument('ncbi_untrustworthy_sp_ledger',
                                   help="file listing genomes with NCBI species assignments deemed to be untrustworthy")
    u_sel_reps_parser.add_argument(
        'sp_priority_ledger', help="file resolving nomenclatural priority of species names")
    u_sel_reps_parser.add_argument(
        'genus_priority_ledger', help="file resolving nomenclatural priority of genus names")
    u_sel_reps_parser.add_argument(
        'ncbi_env_bioproject_ledger', help="file indicating NCBI BioProjects composed on MAGs or SAGs incorrectly annotated at NCBI")
    u_sel_reps_parser.add_argument(
        'lpsn_gss_file', help="table from lpsn.dsmz.de with nomenclature information (lpsn_gss_<date>.csv)")
    u_sel_reps_parser.add_argument('output_dir', help="output directory")
    u_sel_reps_parser.add_argument(
        '--ani_cache_file', help='file with precomputed ANI and AF values')
    u_sel_reps_parser.add_argument(
        '-c', '--cpus', help='number of cpus', type=int, default=1)
    u_sel_reps_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # cluster genomes to selected GTDB type genomes
    u_cluster_named_reps_parser = subparsers.add_parser('u_cluster_named_reps',
                                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                                        description='Cluster genomes to selected GTDB representatives.')
    u_cluster_named_reps_parser.add_argument(
        'named_rep_file', help="file with representatives selected for named species (u_sel_reps: gtdb_named_reps_final.tsv)")
    u_cluster_named_reps_parser.add_argument(
        'cur_gtdb_metadata_file', help="file with GTDB metadata for current GTDB release (TSV file)")
    u_cluster_named_reps_parser.add_argument(
        'cur_genomic_path_file', help="file indicating path to current genomic FASTA files for genomes")
    u_cluster_named_reps_parser.add_argument(
        'qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    u_cluster_named_reps_parser.add_argument('ncbi_genbank_assembly_file',
                                             help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    u_cluster_named_reps_parser.add_argument(
        'untrustworthy_type_file', help="file listing genomes that should be considered untrustworthy as type material (u_resolve_types: untrustworthy_type_material.tsv)")
    u_cluster_named_reps_parser.add_argument(
        'rep_mash_sketch_file', help="file with Mash sketch for representative genomes (u_sel_reps: gtdb_reps.msh)")
    u_cluster_named_reps_parser.add_argument(
        'rep_ani_file', help="file with pairwise ANI values between representative genomes of named species (u_sel_reps: gtdb_rep_pairwise_ani.tsv)")
    u_cluster_named_reps_parser.add_argument(
        'gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    u_cluster_named_reps_parser.add_argument(
        'ncbi_env_bioproject_ledger', help="file indicating NCBI BioProjects composed on MAGs or SAGs incorrectly annotated at NCBI")
    u_cluster_named_reps_parser.add_argument(
        'output_dir', help="output directory")
    u_cluster_named_reps_parser.add_argument(
        '--ani_cache_file', help='file with precomputed ANI and AF values')
    u_cluster_named_reps_parser.add_argument(
        '--ani_sp', help='minimum ANI for defining species clusters', type=float, default=Defaults.ANI_SP)
    u_cluster_named_reps_parser.add_argument(
        '--af_sp', help='minimum AF for defining species clusters', type=float, default=Defaults.AF_SP)
    u_cluster_named_reps_parser.add_argument(
        '-c', '--cpus', help='number of cpus', type=int, default=1)
    u_cluster_named_reps_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # infer de novo species clusters and type genomes for remaining genomes
    u_cluster_de_novo_parser = subparsers.add_parser('u_cluster_de_novo',
                                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                                     description='Infer de novo species clusters and representatives for remaining genomes.')
    u_cluster_de_novo_parser.add_argument(
        'named_cluster_file', help="file with named GTDB clusters (u_cluster_named_reps: gtdb_named_rep_clusters.tsv)")
    u_cluster_de_novo_parser.add_argument(
        'cur_gtdb_metadata_file', help="file with GTDB metadata for current GTDB release (TSV file)")
    u_cluster_de_novo_parser.add_argument(
        'cur_genomic_path_file', help="file indicating path to current genomic FASTA files for genomes")
    u_cluster_de_novo_parser.add_argument(
        'qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    u_cluster_de_novo_parser.add_argument('ncbi_genbank_assembly_file',
                                          help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    u_cluster_de_novo_parser.add_argument(
        'untrustworthy_type_file', help="file listing genomes that should be considered untrustworthy as type material (u_resolve_types: untrustworthy_type_material.tsv)")
    u_cluster_de_novo_parser.add_argument(
        'ani_af_rep_vs_nonrep', help="file with pairwise ANI values between representative and non-representative genomes (u_cluster_named_reps: ani_af_rep_vs_nonrep.pkl)")
    u_cluster_de_novo_parser.add_argument(
        'gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    u_cluster_de_novo_parser.add_argument(
        'ncbi_env_bioproject_ledger', help="file indicating NCBI BioProjects composed on MAGs or SAGs incorrectly annotated at NCBI")
    u_cluster_de_novo_parser.add_argument(
        'output_dir', help="output directory")
    u_cluster_de_novo_parser.add_argument(
        '--ani_cache_file', help='file with precomputed ANI and AF values')
    u_cluster_de_novo_parser.add_argument(
        '--ani_sp', help='minimum ANI for defining species clusters', type=float, default=Defaults.ANI_SP)
    u_cluster_de_novo_parser.add_argument(
        '--af_sp', help='minimum AF for defining species clusters', type=float, default=Defaults.AF_SP)
    u_cluster_de_novo_parser.add_argument(
        '-c', '--cpus', help='number of cpus', type=int, default=1)
    u_cluster_de_novo_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # summary statistics indicating changes to GTDB species cluster membership
    u_cluster_stats_parser = subparsers.add_parser('u_cluster_stats',
                                                   formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                                   description='Summary statistics indicating changes to GTDB species cluster membership.')
    u_cluster_stats_parser.add_argument(
        'gtdb_clusters_file', help="file indicating representatives of each GTDB species cluster (u_cluster_de_novo: gtdb_clusters_de_novo.tsv")
    u_cluster_stats_parser.add_argument('prev_gtdb_metadata_file',
                                        help="file with GTDB metadata for previous GTDB release (TSV file)")
    u_cluster_stats_parser.add_argument(
        'cur_gtdb_metadata_file', help="file with GTDB metadata for current GTDB release (TSV file)")
    u_cluster_stats_parser.add_argument(
        'qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    u_cluster_stats_parser.add_argument('ncbi_genbank_assembly_file',
                                        help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    u_cluster_stats_parser.add_argument(
        'untrustworthy_type_file', help="file listing genomes that should be considered untrustworthy as type material (u_resolve_types: untrustworthy_type_material.tsv)")
    u_cluster_stats_parser.add_argument(
        'gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    u_cluster_stats_parser.add_argument(
        'ncbi_env_bioproject_ledger', help="file indicating NCBI BioProjects composed on MAGs or SAGs incorrectly annotated at NCBI")
    u_cluster_stats_parser.add_argument('output_dir', help="output directory")
    u_cluster_stats_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # identify genomes with erroneous NCBI species assignments
    u_ncbi_erroneous_parser = subparsers.add_parser('u_ncbi_erroneous',
                                                    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                                    description='Identify genomes with erroneous NCBI species assignments.')
    u_ncbi_erroneous_parser.add_argument(
        'gtdb_clusters_file', help="file indicating representatives of each GTDB species cluster (u_cluster_de_novo: gtdb_clusters_de_novo.tsv)")
    u_ncbi_erroneous_parser.add_argument(
        'cur_gtdb_metadata_file', help="file with GTDB metadata for current GTDB release (TSV file)")
    u_ncbi_erroneous_parser.add_argument(
        'cur_genomic_path_file', help="file indicating path to current genomic FASTA files for genomes")
    u_ncbi_erroneous_parser.add_argument(
        'qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    u_ncbi_erroneous_parser.add_argument('ncbi_genbank_assembly_file',
                                         help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    u_ncbi_erroneous_parser.add_argument(
        'untrustworthy_type_file', help="file listing genomes that should be considered untrustworthy as type material (u_resolve_types: untrustworthy_type_material.tsv)")
    u_ncbi_erroneous_parser.add_argument(
        'gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    u_ncbi_erroneous_parser.add_argument(
        'ncbi_untrustworthy_sp_ledger', help="file listing genomes with NCBI species assignments deemed to be untrustworthy")
    u_ncbi_erroneous_parser.add_argument(
        'ncbi_env_bioproject_ledger', help="file indicating NCBI BioProjects composed on MAGs or SAGs incorrectly annotated at NCBI")
    u_ncbi_erroneous_parser.add_argument('output_dir', help="output directory")
    u_ncbi_erroneous_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # determine synonyms for validly or effectively published species
    u_synonyms_parser = subparsers.add_parser('u_synonyms',
                                              formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                              description='Determine synonyms for validly or effectively published species.')
    u_synonyms_parser.add_argument(
        'gtdb_clusters_file', help="file indicating representatives of each GTDB species cluster (u_cluster_de_novo: gtdb_clusters_de_novo.tsv)")
    u_synonyms_parser.add_argument('cur_gtdb_metadata_file',
                                   help="file with GTDB metadata for current GTDB release (TSV file)")
    u_synonyms_parser.add_argument(
        'qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    u_synonyms_parser.add_argument(
        'ncbi_misclassified_file', help="file indicating genomes with erroneous NCBI species assignments (u_ncbi_erroneous: ncbi_missclassified_sp.tsv)")
    u_synonyms_parser.add_argument('ncbi_genbank_assembly_file',
                                   help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    u_synonyms_parser.add_argument(
        'untrustworthy_type_file', help="file listing genomes that should be considered untrustworthy as type material (u_resolve_types: untrustworthy_type_material.tsv)")
    u_synonyms_parser.add_argument(
        'ani_af_rep_vs_nonrep', help="file with pairwise ANI values between representative and non-representative genomes (u_cluster_named_reps: ani_af_rep_vs_nonrep.pkl)")
    u_synonyms_parser.add_argument(
        'gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    u_synonyms_parser.add_argument(
        'sp_priority_ledger', help="file resolving nomenclatural priority of species names")
    u_synonyms_parser.add_argument(
        'genus_priority_ledger', help="file resolving nomenclatural priority of genus names")
    u_synonyms_parser.add_argument(
        'ncbi_env_bioproject_ledger', help="file indicating NCBI BioProjects composed on MAGs or SAGs incorrectly annotated at NCBI")
    u_synonyms_parser.add_argument(
        'lpsn_gss_file', help="table from lpsn.dsmz.de with nomenclature information (lpsn_gss_<date>.csv)")
    u_synonyms_parser.add_argument('output_dir', help="output directory")
    u_synonyms_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # produce curation trees highlighting new NCBI taxa
    u_curation_tree_parser = subparsers.add_parser('u_curation_trees',
                                                   formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                                   description='Produce curation trees highlighting new NCBI taxa.')
    u_curation_tree_parser.add_argument(
        'gtdb_clusters_file', help="file indicating representatives of each GTDB species cluster (u_cluster_de_novo: gtdb_clusters_de_novo.tsv")
    u_curation_tree_parser.add_argument('prev_gtdb_metadata_file',
                                        help="file with GTDB metadata for previous GTDB release (TSV file)")
    u_curation_tree_parser.add_argument(
        'cur_gtdb_metadata_file', help="file with GTDB metadata for current GTDB release (TSV file)")
    u_curation_tree_parser.add_argument(
        'qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    u_curation_tree_parser.add_argument('ncbi_genbank_assembly_file',
                                        help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    u_curation_tree_parser.add_argument(
        'untrustworthy_type_file', help="file listing genomes that should be considered untrustworthy as type material (u_resolve_types: untrustworthy_type_material.tsv)")
    u_curation_tree_parser.add_argument(
        'gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    u_curation_tree_parser.add_argument(
        'ncbi_env_bioproject_ledger', help="file indicating NCBI BioProjects composed on MAGs or SAGs incorrectly annotated at NCBI")
    u_curation_tree_parser.add_argument('output_dir', help="output directory")
    u_curation_tree_parser.add_argument(
        '--output_prefix', help="output prefix", default='gtdb_rX')
    u_curation_tree_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # produce initial best guess at GTDB species clusters
    u_species_init_parser = subparsers.add_parser('u_species_init',
                                                  formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                                  description='Produce initial best guess at GTDB species clusters.')
    # produce initial best guess at GTDB species clusters
    u_species_init_parser = subparsers.add_parser('u_species_init',
                                                  formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                                  description='Produce initial best guess at GTDB species clusters.')
    u_species_init_parser.add_argument(
        'gtdb_clusters_file', help="file indicating representatives of each GTDB species cluster (u_cluster_de_novo: gtdb_clusters_de_novo.tsv)")
    u_species_init_parser.add_argument('prev_gtdb_metadata_file',
                                       help="file with GTDB metadata for previous GTDB release (TSV file)")
    u_species_init_parser.add_argument(
        'prev_genomic_path_file', help="file indicating  path to previous genomic FASTA files for genomes")
    u_species_init_parser.add_argument(
        'cur_gtdb_metadata_file', help="file with GTDB metadata for current GTDB release (TSV file)")
    u_species_init_parser.add_argument(
        'cur_genomic_path_file', help="file indicating path to current genomic FASTA files for genomes")
    u_species_init_parser.add_argument(
        'qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    u_species_init_parser.add_argument(
        'gtdbtk_classify_file', help="file with GTDB-Tk classifications for new and updated genomes  (u_gtdbtk: gtdbtk_classify.tsv)")
    u_species_init_parser.add_argument('ncbi_genbank_assembly_file',
                                       help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    u_species_init_parser.add_argument(
        'untrustworthy_type_file', help="file listing genomes that should be considered untrustworthy as type material (u_resolve_types: untrustworthy_type_material.tsv)")
    u_species_init_parser.add_argument(
        'synonym_file', help="file with species names marked as synonyms (u_synonyms: synonyms.tsv)")
    u_species_init_parser.add_argument(
        'gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    u_species_init_parser.add_argument(
        'sp_priority_ledger', help="file resolving nomenclatural priority of species names")
    u_species_init_parser.add_argument(
        'genus_priority_ledger', help="file resolving nomenclatural priority of genus names")
    u_species_init_parser.add_argument(
        'ncbi_env_bioproject_ledger', help="file indicating NCBI BioProjects composed on MAGs or SAGs incorrectly annotated at NCBI")
    u_species_init_parser.add_argument(
        'lpsn_gss_file', help="table from lpsn.dsmz.de with nomenclature information (lpsn_gss_<date>.csv)")
    u_species_init_parser.add_argument('output_dir', help="output directory")
    u_species_init_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # establish final species names based on manual curation
    u_pmc_species_names_parser = subparsers.add_parser('u_pmc_species_names',
                                                       formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                                       description='Refine species names using post-manual curation rules.')
    u_pmc_species_names_parser.add_argument(
        'taxonomy_init', help="file with initial, best guess at taxonomy from domain to genus (u_species_init: gtdb_ar_taxonomy.tsv or gtdb_bac_taxonomy.tsv")
    u_pmc_species_names_parser.add_argument(
        'manual_sp_file', help="file indicating manual species assignments that override those in the `taxonomy_init` file")
    u_pmc_species_names_parser.add_argument(
        'gtdb_clusters_file', help="file indicating representatives of each GTDB species cluster (u_cluster_de_novo: gtdb_clusters_de_novo.tsv)")
    u_pmc_species_names_parser.add_argument(
        'prev_gtdb_metadata_file', help="file with GTDB metadata for previous GTDB release (TSV file)")
    u_pmc_species_names_parser.add_argument(
        'cur_gtdb_metadata_file', help="file with GTDB metadata for current GTDB release (TSV file)")
    u_pmc_species_names_parser.add_argument(
        'qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    u_pmc_species_names_parser.add_argument(
        'ncbi_misclassified_file', help="file indicating genomes with erroneous NCBI species assignments (u_ncbi_erroneous: ncbi_missclassified_sp.tsv)")
    u_pmc_species_names_parser.add_argument('ncbi_genbank_assembly_file',
                                            help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    u_pmc_species_names_parser.add_argument(
        'untrustworthy_type_file', help="file listing genomes that should be considered untrustworthy as type material (u_resolve_types: untrustworthy_type_material.tsv)")
    u_pmc_species_names_parser.add_argument(
        'synonym_file', help="file with species names marked as synonyms (u_synonyms: synonyms.tsv)")
    u_pmc_species_names_parser.add_argument(
        'updated_species_reps', help="file indicating the updating of GTDB representatives (u_rep_actions: updated_species_reps.tsv)")
    u_pmc_species_names_parser.add_argument(
        'gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    u_pmc_species_names_parser.add_argument('species_classification_ledger',
                                            help="file indicating manually defined GTDB species names for select genomes")
    u_pmc_species_names_parser.add_argument(
        'sp_priority_ledger', help="file resolving nomenclatural priority of species names")
    u_pmc_species_names_parser.add_argument(
        'genus_priority_ledger', help="file resolving nomenclatural priority of genus names")
    u_pmc_species_names_parser.add_argument(
        'specific_epithet_ledger', help="file indicating required changes to the suffix of specific epithet due to transfers to a new genus")
    u_pmc_species_names_parser.add_argument(
        'ncbi_env_bioproject_ledger', help="file indicating NCBI BioProjects composed on MAGs or SAGs incorrectly annotated at NCBI")
    u_pmc_species_names_parser.add_argument(
        'lpsn_gss_file', help="table from lpsn.dsmz.de with nomenclature information (lpsn_gss_<date>.csv)")
    u_pmc_species_names_parser.add_argument(
        'output_dir', help="output directory")
    u_pmc_species_names_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # identify species names manually set by curators
    pmc_manual_species_parser = subparsers.add_parser('pmc_manual_species',
                                                      formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                                      description='Identify species names manually set by curators.')
    pmc_manual_species_parser.add_argument(
        'init_taxonomy', help="initial taxonomy file")
    pmc_manual_species_parser.add_argument(
        'manually_curated_tree', help="tree decorated with manually curated taxonomy")
    pmc_manual_species_parser.add_argument(
        'output_dir', help="output directory")
    pmc_manual_species_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # replace generic names with genus assignment
    pmc_replace_generic_parser = subparsers.add_parser('pmc_replace_generic',
                                                       formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                                       description='Replace generic names with genus assignment.')
    pmc_replace_generic_parser.add_argument(
        'manual_species_names', help="file indicating manually curated species names (u_manual_species: manual_species_names.tsv)")
    pmc_replace_generic_parser.add_argument(
        'manual_taxonomy', help="manually curated taxonomy file")
    pmc_replace_generic_parser.add_argument(
        'output_dir', help="output directory")
    pmc_replace_generic_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # check for agreement between GTDB genera and genomes assembled from type species of genus
    pmc_check_type_species_parser = subparsers.add_parser('pmc_check_type_species',
                                                          formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                                          description='Check for agreement between GTDB genera and genomes assembled from type species of genus.')
    pmc_check_type_species_parser.add_argument(
        'manual_taxonomy', help="file with manually curated taxonomy (pmc_species_names: final_taxonomy.tsv)")
    pmc_check_type_species_parser.add_argument(
        'cur_gtdb_metadata_file', help="file with GTDB metadata for current GTDB release (TSV file)")
    pmc_check_type_species_parser.add_argument(
        'qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    pmc_check_type_species_parser.add_argument(
        'ncbi_genbank_assembly_file', help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    pmc_check_type_species_parser.add_argument(
        'untrustworthy_type_file', help="file listing genomes that should be considered untrustworthy as type material (u_resolve_types: untrustworthy_type_material.tsv)")
    pmc_check_type_species_parser.add_argument(
        'gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    pmc_check_type_species_parser.add_argument(
        'sp_priority_ledger', help="file resolving nomenclatural priority of species names")
    pmc_check_type_species_parser.add_argument(
        'genus_priority_ledger', help="file resolving nomenclatural priority of genus names")
    pmc_check_type_species_parser.add_argument(
        'ncbi_env_bioproject_ledger', help="file indicating NCBI BioProjects composed on MAGs or SAGs incorrectly annotated at NCBI")
    pmc_check_type_species_parser.add_argument(
        'lpsn_gss_file', help="table from lpsn.dsmz.de with nomenclature information (lpsn_gss_<date>.csv)")
    pmc_check_type_species_parser.add_argument(
        'output_dir', help="output directory")
    pmc_check_type_species_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # check for agreement between GTDB species and genomes assembled from type strain of species
    pmc_check_type_strains_parser = subparsers.add_parser('pmc_check_type_strains',
                                                          formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                                          description='Check for agreement between GTDB species and genomes assembled from type strain of species.')
    pmc_check_type_strains_parser.add_argument(
        'manual_taxonomy', help="file with manually curated taxonomy (pmc_species_names: final_taxonomy.tsv)")
    pmc_check_type_strains_parser.add_argument(
        'cur_gtdb_metadata_file', help="file with GTDB metadata for current GTDB release (TSV file)")
    pmc_check_type_strains_parser.add_argument(
        'qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    pmc_check_type_strains_parser.add_argument(
        'ncbi_genbank_assembly_file', help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    pmc_check_type_strains_parser.add_argument(
        'untrustworthy_type_file', help="file listing genomes that should be considered untrustworthy as type material (u_resolve_types: untrustworthy_type_material.tsv)")
    pmc_check_type_strains_parser.add_argument(
        'gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    pmc_check_type_strains_parser.add_argument(
        'ncbi_env_bioproject_ledger', help="file indicating NCBI BioProjects composed on MAGs or SAGs incorrectly annotated at NCBI")
    pmc_check_type_strains_parser.add_argument(
        'output_dir', help="output directory")
    pmc_check_type_strains_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # establish final species names based on manual curation
    pmc_species_names_parser = subparsers.add_parser('pmc_species_names',
                                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                                     description='Establish final species names based on manual curation.')
    pmc_species_names_parser.add_argument(
        'curation_tree', help="manually curated tree to relabel with final species names")
    pmc_species_names_parser.add_argument(
        'manual_sp_names', help="file indicating species names explicitly set by manually curated (pmc_manual_species: manual_species_names.tsv)")
    pmc_species_names_parser.add_argument(
        'manual_taxonomy', help="file with manually curated taxonomy (pmc_replace_generic: taxonomy_updated_sp.tsv)")
    pmc_species_names_parser.add_argument(
        'pmc_custom_species', help="file indicating post-curation, manual species assignments that are hard to automatically generate")
    pmc_species_names_parser.add_argument(
        'gtdb_clusters_file', help="file indicating representatives of each GTDB species cluster (u_cluster_de_novo: gtdb_clusters_de_novo.tsv)")
    pmc_species_names_parser.add_argument(
        'prev_gtdb_metadata_file', help="file with GTDB metadata for previous GTDB release (TSV file)")
    pmc_species_names_parser.add_argument(
        'cur_gtdb_metadata_file', help="file with GTDB metadata for current GTDB release (TSV file)")
    pmc_species_names_parser.add_argument(
        'qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    pmc_species_names_parser.add_argument(
        'ncbi_misclassified_file', help="file indicating genomes with erroneous NCBI species assignments (u_ncbi_erroneous: ncbi_misclassified_sp.gtdb_clustering.tsv)")
    pmc_species_names_parser.add_argument('ncbi_genbank_assembly_file',
                                          help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    pmc_species_names_parser.add_argument(
        'untrustworthy_type_file', help="file listing genomes that should be considered untrustworthy as type material (u_resolve_types: untrustworthy_type_material.tsv)")
    pmc_species_names_parser.add_argument(
        'synonym_file', help="file with species names marked as synonyms (u_synonyms: synonyms.tsv)")
    pmc_species_names_parser.add_argument(
        'updated_species_reps', help="file indicating the updating of GTDB representatives (u_rep_actions: updated_species_reps.tsv)")
    pmc_species_names_parser.add_argument(
        'gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    pmc_species_names_parser.add_argument('species_classification_ledger',
                                          help="file indicating manually defined GTDB species names for select genomes")
    pmc_species_names_parser.add_argument(
        'sp_priority_ledger', help="file resolving nomenclatural priority of species names")
    pmc_species_names_parser.add_argument(
        'genus_priority_ledger', help="file resolving nomenclatural priority of genus names")
    pmc_species_names_parser.add_argument(
        'specific_epithet_ledger', help="file indicating required changes to the suffix of specific epithet due to transfers to a new genus")
    pmc_species_names_parser.add_argument(
        'ncbi_env_bioproject_ledger', help="file indicating NCBI BioProjects composed on MAGs or SAGs incorrectly annotated at NCBI")
    pmc_species_names_parser.add_argument(
        'lpsn_gss_file', help="table from lpsn.dsmz.de with nomenclature information (lpsn_gss_<date>.csv)")
    pmc_species_names_parser.add_argument(
        'output_dir', help="output directory")
    pmc_species_names_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # pmc_validate           -> Validate final species names
    pmc_validate_parser = subparsers.add_parser('pmc_validate',
                                                formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                                description='Validate final species names.')
    pmc_validate_parser.add_argument(
        'manual_sp_names', help="file indicating species names explicitly set by manually curated (pmc_manual_species: manual_species_names.tsv)")
    pmc_validate_parser.add_argument(
        'final_taxonomy', help="file with final taxonomy (pmc_species_names: final_taxonomy.tsv)")
    pmc_validate_parser.add_argument(
        'final_scaled_tree', help="Newick file with scaled curation tree")
    pmc_validate_parser.add_argument(
        'pmc_custom_species', help="file indicating post-curation, manual species assignments that are hard to automatically generate")
    pmc_validate_parser.add_argument(
        'gtdb_clusters_file', help="file indicating representatives of each GTDB species cluster (u_cluster_de_novo: gtdb_clusters_de_novo.tsv)")
    pmc_validate_parser.add_argument('prev_gtdb_metadata_file',
                                     help="file with GTDB metadata for previous GTDB release (TSV file)")
    pmc_validate_parser.add_argument('cur_gtdb_metadata_file',
                                     help="file with GTDB metadata for current GTDB release (TSV file)")
    pmc_validate_parser.add_argument(
        'qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    pmc_validate_parser.add_argument(
        'ncbi_misclassified_file', help="file indicating genomes with erroneous NCBI species assignments (u_ncbi_erroneous: ncbi_missclassified_sp.tsv)")
    pmc_validate_parser.add_argument('ncbi_genbank_assembly_file',
                                     help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    pmc_validate_parser.add_argument(
        'untrustworthy_type_file', help="file listing genomes that should be considered untrustworthy as type material (u_resolve_types: untrustworthy_type_material.tsv)")
    pmc_validate_parser.add_argument(
        'synonym_file', help="file with species names marked as synonyms (u_synonyms: synonyms.tsv)")
    pmc_validate_parser.add_argument(
        'updated_species_reps', help="file indicating status of GTDB representative genomes (u_rep_actions: updated_species_reps.tsv)")
    pmc_validate_parser.add_argument(
        'gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    pmc_validate_parser.add_argument('species_classification_ledger',
                                     help="file indicating manually defined GTDB species names for select genomes")
    pmc_validate_parser.add_argument(
        'sp_priority_ledger', help="file resolving nomenclatural priority of species names")
    pmc_validate_parser.add_argument(
        'genus_priority_ledger', help="file resolving nomenclatural priority of genus names")
    pmc_validate_parser.add_argument(
        'specific_epithet_ledger', help="file indicating required changes to the suffix of specific epithet due to transfers to a new genus")
    pmc_validate_parser.add_argument(
        'ncbi_env_bioproject_ledger', help="file indicating NCBI BioProjects composed on MAGs or SAGs incorrectly annotated at NCBI")
    pmc_validate_parser.add_argument(
        'lpsn_gss_metadata_file', help="file indicating GSS (genus-species-subspecies) metadata at LPSN (obtained from https://lpsn.dsmz.de/downloads)")
    pmc_validate_parser.add_argument('lpsn_data',
                                     help="file with metadata from LPSN website (obtained by gtdb-migration-tk)")
    pmc_validate_parser.add_argument(
        'ground_truth_test_cases', help="file indicating specific test cases with ground truth assignments to validate")
    pmc_validate_parser.add_argument('output_dir', help="output directory")
    pmc_validate_parser.add_argument('--skip_full_taxonomy_checks', action='store_true',
                                     help="skip tests for valid taxonomy strings (useful when taxonomy still has unresolved genus assignments)")
    pmc_validate_parser.add_argument('--skip_genus_checks', action='store_true',
                                     help="skip tests related to validating genus/generic names")
    pmc_validate_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # cluster genomes to selected GTDB type genomes
    pmc_cluster_stats_parser = subparsers.add_parser('pmc_cluster_stats',
                                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                                     description='Calculate final statistics for species clusters.')
    pmc_cluster_stats_parser.add_argument(
        'cluster_file', help='file specifying species clusters')
    pmc_cluster_stats_parser.add_argument(
        'genome_path_file', help="file indicating path to genome files (TSV file)")
    pmc_cluster_stats_parser.add_argument(
        'gtdb_metadata_file', help="metadata file from GTDB with NCBI taxonomy information (TSV file)")
    pmc_cluster_stats_parser.add_argument(
        'output_dir', help="output directory")
    pmc_cluster_stats_parser.add_argument(
        '--ani_cache_file', help='file with precomputed ANI and AF values')
    pmc_cluster_stats_parser.add_argument(
        '--max_genomes', help='maximum randomly selected genomes to consider in a species cluster', type=int, default=100)
    pmc_cluster_stats_parser.add_argument(
        '--af_sp', help='minimum AF for defining species clusters', type=float, default=Defaults.AF_SP)
    pmc_cluster_stats_parser.add_argument(
        '-c', '--cpus', help='number of cpus', type=int, default=1)
    pmc_cluster_stats_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # compare current and previous representatives
    merge_test_parser = subparsers.add_parser('merge_test',
                                              formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                              description='Produce information relevant to merging two sister species.')
    merge_test_parser.add_argument(
        'gtdb_metadata_file', help="file with GTDB metadata (TSV file)")
    merge_test_parser.add_argument(
        'genome_path_file', help="file indicating data directory for GTDB genomes")
    merge_test_parser.add_argument(
        'species1', help="species to inspect for merging")
    merge_test_parser.add_argument(
        'species2', help="species to inspect for merging")
    merge_test_parser.add_argument('output_dir', help="output directory")
    merge_test_parser.add_argument(
        '--ani_cache_file', help='file with precomputed ANI and AF values')
    merge_test_parser.add_argument(
        '-c', '--cpus', help='number of cpus', type=int, default=1)
    merge_test_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # calculate all pairwise ANI/AF values between genomes in two species
    ani_sp_pair_parser = subparsers.add_parser('ani_sp_pair',
                                               formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                               description='Calculate all pairwise ANI/AF values between genomes in two species.')
    ani_sp_pair_parser.add_argument(
        'gtdb_metadata_file', help="file with GTDB metadata (TSV file)")
    ani_sp_pair_parser.add_argument(
        'genome_path_file', help="file indicating data directory for GTDB genomes")
    ani_sp_pair_parser.add_argument(
        'species1', help="species to inspect for merging")
    ani_sp_pair_parser.add_argument(
        'species2', help="species to inspect for merging")
    ani_sp_pair_parser.add_argument('output_dir', help="output directory")
    ani_sp_pair_parser.add_argument(
        '--ani_cache_file', help='file with precomputed ANI and AF values')
    ani_sp_pair_parser.add_argument(
        '-c', '--cpus', help='number of cpus', type=int, default=1)
    ani_sp_pair_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # dereplicate GTDB species clusters using ANI/AF criteria
    intra_sp_derep_parser = subparsers.add_parser('intra_sp_derep',
                                                  formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                                  description='Dereplicate GTDB species clusters using ANI/AF criteria.')
    intra_sp_derep_parser.add_argument(
        'gtdb_clusters_file', help="file indicating representatives of each GTDB species cluster (u_cluster_de_novo: gtdb_clusters_de_novo.tsv)")
    intra_sp_derep_parser.add_argument(
        'gtdb_metadata_file', help="file with metadata for GTDB genomes (TSV file)")
    intra_sp_derep_parser.add_argument(
        'genomic_path_file', help="file indicating  path to previous genomic FASTA files for genomes")
    intra_sp_derep_parser.add_argument('output_dir', help="output directory")
    intra_sp_derep_parser.add_argument(
        '--ani_cache_file', help='file with precomputed ANI and AF values')
    intra_sp_derep_parser.add_argument(
        '--derep_ani', help='ANI threshold for intra-species dereplication [0, 100]', type=float, default=99)
    intra_sp_derep_parser.add_argument(
        '--derep_af', help='AF threshold for intra-species dereplication [0, 1]', type=float, default=0.90)
    intra_sp_derep_parser.add_argument(
        '--max_genomes_per_sp', help='maximum genomes to consider in a species', type=int, default=250)
    intra_sp_derep_parser.add_argument(
        '-c', '--cpus', help='number of cpus', type=int, default=1)
    intra_sp_derep_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # calculate intra-genus ANI/AF values between GTDB representative genomes
    intra_genus_ani_parser = subparsers.add_parser('intra_genus_ani',
                                                   formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                                   description='Calculate intra-genus ANI/AF values between GTDB representative genomes.')
    intra_genus_ani_parser.add_argument(
        'target_genus', help="genus of interest (e.g., g__Enterobacter)")
    intra_genus_ani_parser.add_argument(
        'gtdb_metadata_file', help="file with metadata for GTDB genomes (TSV file)")
    intra_genus_ani_parser.add_argument(
        'genomic_path_file', help="file indicating  path to previous genomic FASTA files for genomes")
    intra_genus_ani_parser.add_argument('output_dir', help="output directory")
    intra_genus_ani_parser.add_argument(
        '--ani_cache_file', help='file with precomputed ANI and AF values')
    intra_genus_ani_parser.add_argument(
        '-c', '--cpus', help='number of cpus', type=int, default=1)
    intra_genus_ani_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # calculate ANI/AF betwenn GTDB representative genomes with the same genus
    ani_af_reps_parser = subparsers.add_parser('ani_af_reps',
                                               formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                               description='Calculate ANI/AF betwenn GTDB representative genomes with the same genus.')
    ani_af_reps_parser.add_argument(
        'gtdb_metadata_file', help="file with metadata for GTDB genomes (TSV file)")
    ani_af_reps_parser.add_argument(
        'genomic_path_file', help="file indicating  path to previous genomic FASTA files for genomes")
    ani_af_reps_parser.add_argument('output_dir', help="output directory")
    ani_af_reps_parser.add_argument(
        '--ani_cache_file', help='file with precomputed ANI and AF values')
    ani_af_reps_parser.add_argument(
        '-c', '--cpus', help='number of cpus', type=int, default=1)
    ani_af_reps_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # report information related to a genome being type material
    type_status_parser = subparsers.add_parser('type_status',
                                               formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                               description='Report information related to a genome being type material.')
    type_status_parser.add_argument('cur_gtdb_metadata_file',
                                    help="file with GTDB metadata for current GTDB release (TSV file)")
    type_status_parser.add_argument(
        'qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    type_status_parser.add_argument('ncbi_genbank_assembly_file',
                                    help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    type_status_parser.add_argument(
        'untrustworthy_type_file', help="file listing genomes that should be considered untrustworthy as type material (u_resolve_types: untrustworthy_type_material.tsv)")
    type_status_parser.add_argument(
        'gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    type_status_parser.add_argument(
        'ncbi_env_bioproject_ledger', help="file indicating NCBI BioProjects composed on MAGs or SAGs incorrectly annotated at NCBI")
    type_status_parser.add_argument(
        'genome_ids', nargs='+', help="IDs for genomes of interest")
    type_status_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # compare current and previous representatives
    rep_compare_parser = subparsers.add_parser('rep_compare',
                                               formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                               description='Compare current and previous representatives.')
    rep_compare_parser.add_argument(
        'cur_metadata_file', help="metadata file for all genomes in current GTDB release")
    rep_compare_parser.add_argument(
        'prev_metadata_file', help="metadata file for all genomes in previous GTDB release")
    rep_compare_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # play to explore new ideas or calculate one off statistics relted to species clusters
    sandbox_parser = subparsers.add_parser('sandbox',
                                           formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                           description='Play to explore new ideas or calculate one off statistics relted to species clusters.')
    sandbox_parser.add_argument('prev_gtdb_metadata_file',
                                help="file with GTDB metadata for previous GTDB release (TSV file)")
    sandbox_parser.add_argument('cur_gtdb_metadata_file',
                                help="file with GTDB metadata for current GTDB release (TSV file)")
    sandbox_parser.add_argument(
        'qc_passed_file', help="file indicating genomes that have passed QC (u_qc_genomes: qc_passed.tsv)")
    sandbox_parser.add_argument('ncbi_genbank_assembly_file',
                                help="NCBI GenBank assembly file indicating potentially erroneous genomes")
    sandbox_parser.add_argument(
        'untrustworthy_type_file', help="file listing genomes that should be considered untrustworthy as type material (u_resolve_types: untrustworthy_type_material.tsv)")
    sandbox_parser.add_argument(
        'gtdb_type_strains_ledger', help="file listing genomes to consider as being the type strain for valid or effectively published species name")
    sandbox_parser.add_argument(
        'sp_priority_ledger', help="file resolving nomenclatural priority of species names")
    sandbox_parser.add_argument(
        'genus_priority_ledger', help="file resolving nomenclatural priority of genus names")
    sandbox_parser.add_argument('ncbi_env_bioproject_ledger',
                                help="file indicating NCBI BioProjects composed on MAGs or SAGs incorrectly annotated at NCBI")
    sandbox_parser.add_argument(
        'lpsn_gss_file', help="table from lpsn.dsmz.de with nomenclature information (lpsn_gss_<date>.csv)")
    sandbox_parser.add_argument('output_dir', help="output directory")
    sandbox_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # get and check options
    args = None
    if(len(sys.argv) == 1 or sys.argv[1] == '-h' or sys.argv == '--help'):
        print_help()
        sys.exit(0)
    else:
        args = parser.parse_args()

    try:
        logger_setup(args.output_dir, args.silent)
    except:
        logger_setup(None, args.silent)

    # do what we came here to do
    try:
        parser = OptionsParser()
        if(False):
            # import pstats
            # p = pstats.Stats('prof')
            # p.sort_stats('cumulative').print_stats(10)
            # p.sort_stats('time').print_stats(10)
            import cProfile
            cProfile.run('parser.run(args)', 'prof')
        elif False:
            import pdb
            pdb.run(parser.run(args))
        else:
            parser.run(args)
    except SystemExit:
        print("Controlled exit resulting from an unrecoverable error or warning.")
        raise
    except:
        print("Unexpected error:", sys.exc_info()[0])
        raise
